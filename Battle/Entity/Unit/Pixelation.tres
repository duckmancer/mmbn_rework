[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;



varying vec2 base_size;
varying vec2 pixelated_size;

uniform bool do_pixelate = false;
uniform bool do_shred = false;
uniform bool do_color_override = false;
uniform float scale = 1.0;
uniform int shred_height = 0;
uniform int shred_cut_ratio = 8;

void vertex() {
	base_size = vec2(
		1.0 / TEXTURE_PIXEL_SIZE.x,
		1.0 / TEXTURE_PIXEL_SIZE.y);
	pixelated_size = vec2(
		base_size.x * scale,
		base_size.y * scale);
}



float pixelate_dimension(float uv, float scaling) {
	if (do_pixelate)
		return floor(uv * scaling) / (scaling);
	else
		return uv;
}

vec2 pixelate(vec2 uv, vec2 scaling) {
    return vec2(
		pixelate_dimension(uv.x, scaling.x),
		pixelate_dimension(uv.y, scaling.y));
}

vec2 shred(vec2 uv) {
	if (do_shred) {
		if (int(uv.x * base_size.x) % 2 == 0) {
			uv.y += float(shred_height) / base_size.y;
		}
		if (int(uv.x * base_size.x) % shred_cut_ratio == 0) {
			uv.y = -1.0;
		}
	}
	return uv;
}

void fragment() {
	vec2 uv = UV;
	
	uv.y = pixelate_dimension(uv.y, pixelated_size.y);
	uv = shred(uv);
	uv.x = pixelate_dimension(uv.x, pixelated_size.x);

//	uv = pixelate(uv, pixelated_size);
	
	COLOR = texture(TEXTURE, uv);
	if (do_color_override) {
		COLOR.r = 1.0;
		COLOR.g = 1.0;
		COLOR.b = 1.0;
	}
}"

[resource]
shader = SubResource( 1 )
shader_param/do_pixelate = false
shader_param/do_shred = false
shader_param/do_color_override = false
shader_param/scale = 0.131875
shader_param/shred_height = 4
shader_param/shred_cut_ratio = 8
